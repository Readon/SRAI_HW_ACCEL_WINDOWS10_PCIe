#-----------------------------------------------------------
# Vivado v2017.4 (64-bit)
# SW Build 2086221 on Fri Dec 15 20:54:30 MST 2017
# IP Build 2085800 on Fri Dec 15 22:25:07 MST 2017
# Start of session at: Thu Jan 11 03:32:34 2018
# Process ID: 13862
# Current directory: /home/sanjayr/projects/TUL_VCU1525/Z10_PCIe_gen3x16/IP/role/IP_SDX_ACCL_KERNEL_FP_VECTOR_MULT
# Command line: vivado -mode batch -source inital_hls_sdx_import.tcl
# Log file: /home/sanjayr/projects/TUL_VCU1525/Z10_PCIe_gen3x16/IP/role/IP_SDX_ACCL_KERNEL_FP_VECTOR_MULT/vivado.log
# Journal file: /home/sanjayr/projects/TUL_VCU1525/Z10_PCIe_gen3x16/IP/role/IP_SDX_ACCL_KERNEL_FP_VECTOR_MULT/vivado.jou
#-----------------------------------------------------------
source inital_hls_sdx_import.tcl
# proc generate_target_HLS_ip {} {
# validate_bd_design -force
# set_property synth_checkpoint_mode None [get_files HLS_PR_SDX_SRAI.bd]
# generate_target all [get_files HLS_PR_SDX_SRAI.bd]
# export_ip_user_files -of_objects [get_files HLS_PR_SDX_SRAI.bd] -no_script -sync -force -quiet
# export_simulation -of_objects [get_files HLS_PR_SDX_SRAI.bd] -directory ./project_X/project_X.ip_user_files/sim_scripts -ip_user_files_dir ./project_X/project_X.ip_user_files -ipstatic_source_dir ./project_X/project_X.ip_user_files/ipstatic -lib_map_path [list {modelsim=./project_X/project_X.cache/compile_simlib/modelsim} {questa=./project_X/project_X.cache/compile_simlib/questa} {ies=./project_X/project_X.cache/compile_simlib/ies} {vcs=./project_X/project_X.cache/compile_simlib/vcs} {riviera=./project_X/project_X.cache/compile_simlib/riviera}] -use_ip_compiled_libs -force -quiet
# }
# source ../../../device_type.tcl
## proc DEVICE_TYPE {} {
##     return xcvu9p-fsgd2104-2-i
## }
## proc disp_hw {} {
## open_hw
## connect_hw_server -url mcmicro:3121
## current_hw_target [get_hw_targets */xilinx_tcf/Digilent/210251893419]
## set_property PARAM.FREQUENCY 15000000 [get_hw_targets */xilinx_tcf/Digilent/210251893419]
## open_hw_target
## current_hw_device [lindex [get_hw_devices] 0]
## refresh_hw_device -update_hw_probes false [lindex [get_hw_devices] 0]
## set_property PROBES.FILE  {./xilinx_pcie3_uscale_ep.ltx} [lindex [get_hw_devices] 0]
## set_property PROGRAM.FILE {./xilinx_pcie3_uscale_ep.bin} [lindex [get_hw_devices] 0]
## refresh_hw_device [lindex [get_hw_devices] 0]
## set_property CONTROL.TRIGGER_POSITION 256 [get_hw_ilas -of_objects [get_hw_devices xcku040_0] -filter {CELL_NAME=~"pcie3_ultrascale_0_support_i/u_ila_ICAP"}]
## run_hw_ila [get_hw_ilas -of_objects [get_hw_devices xcku040_0] -filter {CELL_NAME=~"pcie3_ultrascale_0_support_i/u_ila_ICAP"}]
## wait_on_hw_ila [get_hw_ilas -of_objects [get_hw_devices xcku040_0] -filter {CELL_NAME=~"pcie3_ultrascale_0_support_i/u_ila_ICAP"}]
## display_hw_ila_data [upload_hw_ila_data [get_hw_ilas -of_objects [get_hw_devices xcku040_0] -filter {CELL_NAME=~"pcie3_ultrascale_0_support_i/u_ila_ICAP"}]]
## }
## proc prog_hw {} {
## open_hw
## connect_hw_server -url mcmicro:3121
## current_hw_target [get_hw_targets */xilinx_tcf/Digilent/210251893419]
## set_property PARAM.FREQUENCY 15000000 [get_hw_targets */xilinx_tcf/Digilent/210251893419]
## open_hw_target
## current_hw_device [lindex [get_hw_devices] 0]
## refresh_hw_device -update_hw_probes false [lindex [get_hw_devices] 0]
## set_property PROBES.FILE  {./xilinx_pcie3_uscale_ep.ltx} [lindex [get_hw_devices] 0]
## set_property PROGRAM.FILE {./xilinx_pcie3_uscale_ep.bin} [lindex [get_hw_devices] 0]
## program_hw_devices [lindex [get_hw_devices] 0]
## refresh_hw_device [lindex [get_hw_devices] 0]
## set_property CONTROL.TRIGGER_POSITION 256 [get_hw_ilas -of_objects [get_hw_devices xcku040_0] -filter {CELL_NAME=~"pcie3_ultrascale_0_support_i/u_ila_ICAP"}]
## run_hw_ila [get_hw_ilas -of_objects [get_hw_devices xcku040_0] -filter {CELL_NAME=~"pcie3_ultrascale_0_support_i/u_ila_ICAP"}]
## wait_on_hw_ila [get_hw_ilas -of_objects [get_hw_devices xcku040_0] -filter {CELL_NAME=~"pcie3_ultrascale_0_support_i/u_ila_ICAP"}]
## display_hw_ila_data [upload_hw_ila_data [get_hw_ilas -of_objects [get_hw_devices xcku040_0] -filter {CELL_NAME=~"pcie3_ultrascale_0_support_i/u_ila_ICAP"}]]
## }
# create_project project_X project_X -part [DEVICE_TYPE] 
# source ./sdx_ip_import.tcl
## set SDX_IP SDX_ACCL_KERNEL_FP_VECTOR_MULT
## set_property  ip_repo_paths  ../../../HLS/$SDX_IP/vivado_hls_prj/vhls_prj/solution1/impl/ip [current_project]
# update_ip_catalog
INFO: [IP_Flow 19-234] Refreshing IP repositories
INFO: [IP_Flow 19-1700] Loaded user IP repository '/home/sanjayr/projects/TUL_VCU1525/Z10_PCIe_gen3x16/HLS/SDX_ACCL_KERNEL_FP_VECTOR_MULT/vivado_hls_prj/vhls_prj/solution1/impl/ip'.
INFO: [IP_Flow 19-2313] Loaded Vivado IP repository '/home/applications/Xilinx/Vivado/2017.4/data/ip'.
update_ip_catalog: Time (s): cpu = 00:00:05 ; elapsed = 00:00:14 . Memory (MB): peak = 1480.012 ; gain = 209.969 ; free physical = 60334 ; free virtual = 78379
# create_ip -name sdx_cppKernel_top -vendor xilinx.com -library hls -version 1.0 -module_name $SDX_IP -dir ./ 
WARNING: [IP_Flow 19-4832] The IP name 'SDX_ACCL_KERNEL_FP_VECTOR_MULT' you have specified is long. The Windows operating system has path length limitations. It is recommended you use shorter names to reduce the likelihood of issues.
# generate_target {instantiation_template} [get_files ./$SDX_IP/$SDX_IP.xci]
INFO: [IP_Flow 19-1686] Generating 'Instantiation Template' target for IP 'SDX_ACCL_KERNEL_FP_VECTOR_MULT'...
# update_compile_order -fileset sources_1
CRITICAL WARNING: [filemgmt 20-730] Could not find a top module in the fileset sources_1.
Resolution: With the gui up, review the source files in the Sources window. Use Add Sources to add any needed sources. If the files are disabled, enable them. You can also select the file and choose Set Used In from the pop-up menu. Review if they are being used at the proper points of the flow.
# set_property generate_synth_checkpoint false [get_files  ./$SDX_IP/$SDX_IP.xci]
# generate_target all [get_files  ./$SDX_IP/$SDX_IP.xci]
INFO: [IP_Flow 19-1686] Generating 'Instantiation Template' target for IP 'SDX_ACCL_KERNEL_FP_VECTOR_MULT'...
INFO: [IP_Flow 19-1686] Generating 'Synthesis' target for IP 'SDX_ACCL_KERNEL_FP_VECTOR_MULT'...
INFO: [IP_Flow 19-1686] Generating 'Simulation' target for IP 'SDX_ACCL_KERNEL_FP_VECTOR_MULT'...
WARNING: [IP_Flow 19-519] IP 'SDX_ACCL_KERNEL_FP_VECTOR_MULT' detected a language mismatch between 'VHDL Simulation Wrapper' and 'Verilog Simulation' output products. Please check with the IP provider to see if this is expected.
INFO: [IP_Flow 19-1686] Generating 'Miscellaneous' target for IP 'SDX_ACCL_KERNEL_FP_VECTOR_MULT'...
INFO: [IP_Flow 19-1686] Generating 'Software Driver' target for IP 'SDX_ACCL_KERNEL_FP_VECTOR_MULT'...
# export_ip_user_files -of_objects [get_files ./$SDX_IP/$SDX_IP.xci] -no_script -sync -force -quiet
# export_simulation -of_objects [get_files ./$SDX_IP/$SDX_IP.xci] -directory ./project_X/project_X.ip_user_files/sim_scripts -ip_user_files_dir ./project_X/project_X.ip_user_files -ipstatic_source_dir ./project_X/project_X.ip_user_files/ipstatic -lib_map_path [list {modelsim=./project_X/project_X.cache/compile_simlib/modelsim} {questa=./project_X/project_X.cache/compile_simlib/questa} {ies=./project_X/project_X.cache/compile_simlib/ies} {vcs=./project_X/project_X.cache/compile_simlib/vcs} {riviera=./project_X/project_X.cache/compile_simlib/riviera}] -use_ip_compiled_libs -force -quiet
# source ./HLS_PR_SDX_SRAI_bd.tcl
## namespace eval _tcl {
## proc get_script_folder {} {
##    set script_path [file normalize [info script]]
##    set script_folder [file dirname $script_path]
##    return $script_folder
## }
## }
## variable script_folder
## set script_folder [_tcl::get_script_folder]
## set scripts_vivado_version 2017.4
## set current_vivado_version [version -short]
## if { [string first $scripts_vivado_version $current_vivado_version] == -1 } {
##    puts ""
##    catch {common::send_msg_id "BD_TCL-109" "ERROR" "This script was generated using Vivado <$scripts_vivado_version> and is being run in <$current_vivado_version> of Vivado. Please run the script in Vivado <$scripts_vivado_version> then open the design in Vivado <$current_vivado_version>. Upgrade the design by running \"Tools => Report => Report IP Status...\", then run write_bd_tcl to create an updated script."}
## 
##    return 1
## }
## set list_projs [get_projects -quiet]
## if { $list_projs eq "" } {
##    create_project project_1 myproj -part xcvu9p-fsgd2104-2-i
## }
## variable design_name
## set design_name HLS_PR_SDX_SRAI
## set run_remote_bd_flow 1
## if { $run_remote_bd_flow == 1 } {
##   # Set the reference directory for source file relative paths (by default 
##   # the value is script directory path)
##   set origin_dir .
## 
##   # Use origin directory path location variable, if specified in the tcl shell
##   if { [info exists ::origin_dir_loc] } {
##      set origin_dir $::origin_dir_loc
##   }
## 
##   set str_bd_folder [file normalize ${origin_dir}]
##   set str_bd_filepath ${str_bd_folder}/${design_name}/${design_name}.bd
## 
##   # Check if remote design exists on disk
##   if { [file exists $str_bd_filepath ] == 1 } {
##      catch {common::send_msg_id "BD_TCL-110" "ERROR" "The remote BD file path <$str_bd_filepath> already exists!"}
##      common::send_msg_id "BD_TCL-008" "INFO" "To create a non-remote BD, change the variable <run_remote_bd_flow> to <0>."
##      common::send_msg_id "BD_TCL-009" "INFO" "Also make sure there is no design <$design_name> existing in your current project."
## 
##      return 1
##   }
## 
##   # Check if design exists in memory
##   set list_existing_designs [get_bd_designs -quiet $design_name]
##   if { $list_existing_designs ne "" } {
##      catch {common::send_msg_id "BD_TCL-111" "ERROR" "The design <$design_name> already exists in this project! Will not create the remote BD <$design_name> at the folder <$str_bd_folder>."}
## 
##      common::send_msg_id "BD_TCL-010" "INFO" "To create a non-remote BD, change the variable <run_remote_bd_flow> to <0> or please set a different value to variable <design_name>."
## 
##      return 1
##   }
## 
##   # Check if design exists on disk within project
##   set list_existing_designs [get_files -quiet */${design_name}.bd]
##   if { $list_existing_designs ne "" } {
##      catch {common::send_msg_id "BD_TCL-112" "ERROR" "The design <$design_name> already exists in this project at location:
##     $list_existing_designs"}
##      catch {common::send_msg_id "BD_TCL-113" "ERROR" "Will not create the remote BD <$design_name> at the folder <$str_bd_folder>."}
## 
##      common::send_msg_id "BD_TCL-011" "INFO" "To create a non-remote BD, change the variable <run_remote_bd_flow> to <0> or please set a different value to variable <design_name>."
## 
##      return 1
##   }
## 
##   # Now can create the remote BD
##   # NOTE - usage of <-dir> will create <$str_bd_folder/$design_name/$design_name.bd>
##   create_bd_design -dir $str_bd_folder $design_name
## } else {
## 
##   # Create regular design
##   if { [catch {create_bd_design $design_name} errmsg] } {
##      common::send_msg_id "BD_TCL-012" "INFO" "Please set a different value to variable <design_name>."
## 
##      return 1
##   }
## }
Wrote  : </home/sanjayr/projects/TUL_VCU1525/Z10_PCIe_gen3x16/IP/role/IP_SDX_ACCL_KERNEL_FP_VECTOR_MULT/HLS_PR_SDX_SRAI/HLS_PR_SDX_SRAI.bd> 
## current_bd_design $design_name
## set bCheckIPsPassed 1
## set bCheckIPs 1
## if { $bCheckIPs == 1 } {
##    set list_check_ips "\ 
## xilinx.com:ip:proc_sys_reset:5.0\
## xilinx.com:ip:axi_register_slice:2.1\
## xilinx.com:ip:axi_clock_converter:2.1\
## xilinx.com:hls:sdx_cppKernel_top:1.0\
## "
## 
##    set list_ips_missing ""
##    common::send_msg_id "BD_TCL-006" "INFO" "Checking if the following IPs exist in the project's IP catalog: $list_check_ips ."
## 
##    foreach ip_vlnv $list_check_ips {
##       set ip_obj [get_ipdefs -all $ip_vlnv]
##       if { $ip_obj eq "" } {
##          lappend list_ips_missing $ip_vlnv
##       }
##    }
## 
##    if { $list_ips_missing ne "" } {
##       catch {common::send_msg_id "BD_TCL-115" "ERROR" "The following IPs are not found in the IP Catalog:\n  $list_ips_missing\n\nResolution: Please add the repository containing the IP(s) to the project." }
##       set bCheckIPsPassed 0
##    }
## 
## }
INFO: [BD_TCL-6] Checking if the following IPs exist in the project's IP catalog:  
xilinx.com:ip:proc_sys_reset:5.0 xilinx.com:ip:axi_register_slice:2.1 xilinx.com:ip:axi_clock_converter:2.1 xilinx.com:hls:sdx_cppKernel_top:1.0  .
## if { $bCheckIPsPassed != 1 } {
##   common::send_msg_id "BD_TCL-1003" "WARNING" "Will not continue with creation of design due to the error(s) above."
##   return 3
## }
## proc create_hier_cell_HLS_ip { parentCell nameHier } {
## 
##   variable script_folder
## 
##   if { $parentCell eq "" || $nameHier eq "" } {
##      catch {common::send_msg_id "BD_TCL-102" "ERROR" "create_hier_cell_HLS_ip() - Empty argument(s)!"}
##      return
##   }
## 
##   # Get object for parentCell
##   set parentObj [get_bd_cells $parentCell]
##   if { $parentObj == "" } {
##      catch {common::send_msg_id "BD_TCL-100" "ERROR" "Unable to find parent cell <$parentCell>!"}
##      return
##   }
## 
##   # Make sure parentObj is hier blk
##   set parentType [get_property TYPE $parentObj]
##   if { $parentType ne "hier" } {
##      catch {common::send_msg_id "BD_TCL-101" "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
##      return
##   }
## 
##   # Save current instance; Restore later
##   set oldCurInst [current_bd_instance .]
## 
##   # Set parent object as current
##   current_bd_instance $parentObj
## 
##   # Create cell and set as current instance
##   set hier_obj [create_bd_cell -type hier $nameHier]
##   current_bd_instance $hier_obj
## 
##   # Create interface pins
##   create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 M_AXI
##   create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI
## 
##   # Create pins
##   create_bd_pin -dir I -type rst ARESETN_125M
##   create_bd_pin -dir I -type rst ARESETN_250M
##   create_bd_pin -dir I -type clk CLK_125M
##   create_bd_pin -dir I -type clk CLK_250M
##   create_bd_pin -dir I -type rst HLS_IP_ARESETN
##   create_bd_pin -dir I -type clk HLS_ip_clk
## 
##   # Create instance: axi_clock_converter_0, and set properties
##   set axi_clock_converter_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_clock_converter:2.1 axi_clock_converter_0 ]
## 
##   # Create instance: axi_clock_converter_1, and set properties
##   set axi_clock_converter_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_clock_converter:2.1 axi_clock_converter_1 ]
## 
##   # Create instance: sdx_cppKernel_top_0, and set properties
##   set sdx_cppKernel_top_0 [ create_bd_cell -type ip -vlnv xilinx.com:hls:sdx_cppKernel_top:1.0 sdx_cppKernel_top_0 ]
## 
##   set_property -dict [ list \
##    CONFIG.NUM_READ_OUTSTANDING {1} \
##    CONFIG.NUM_WRITE_OUTSTANDING {1} \
##  ] [get_bd_intf_pins /HLS_ip/sdx_cppKernel_top_0/s_axi_control]
## 
##   # Create interface connections
##   connect_bd_intf_net -intf_net AXI_LITE_3Stage_reg_M_AXI [get_bd_intf_pins S_AXI] [get_bd_intf_pins axi_clock_converter_0/S_AXI]
##   connect_bd_intf_net -intf_net axi_clock_converter_0_M_AXI [get_bd_intf_pins axi_clock_converter_0/M_AXI] [get_bd_intf_pins sdx_cppKernel_top_0/s_axi_control]
##   connect_bd_intf_net -intf_net axi_clock_converter_1_M_AXI [get_bd_intf_pins M_AXI] [get_bd_intf_pins axi_clock_converter_1/M_AXI]
##   connect_bd_intf_net -intf_net sdx_cppKernel_top_0_m_axi_gmem [get_bd_intf_pins axi_clock_converter_1/S_AXI] [get_bd_intf_pins sdx_cppKernel_top_0/m_axi_gmem]
## 
##   # Create port connections
##   connect_bd_net -net CLK_IN_125M_1 [get_bd_pins CLK_125M] [get_bd_pins axi_clock_converter_0/s_axi_aclk]
##   connect_bd_net -net CLK_IN_250_1 [get_bd_pins CLK_250M] [get_bd_pins axi_clock_converter_1/m_axi_aclk]
##   connect_bd_net -net m_axi_aclk_1 [get_bd_pins HLS_ip_clk] [get_bd_pins axi_clock_converter_0/m_axi_aclk] [get_bd_pins axi_clock_converter_1/s_axi_aclk] [get_bd_pins sdx_cppKernel_top_0/ap_clk]
##   connect_bd_net -net m_axi_aresetn_1 [get_bd_pins HLS_IP_ARESETN] [get_bd_pins axi_clock_converter_0/m_axi_aresetn] [get_bd_pins axi_clock_converter_1/s_axi_aresetn] [get_bd_pins sdx_cppKernel_top_0/ap_rst_n]
##   connect_bd_net -net proc_sys_reset_1_peripheral_aresetn [get_bd_pins ARESETN_125M] [get_bd_pins axi_clock_converter_0/s_axi_aresetn]
##   connect_bd_net -net proc_sys_reset_250_peripheral_aresetn [get_bd_pins ARESETN_250M] [get_bd_pins axi_clock_converter_1/m_axi_aresetn]
## 
##   # Restore current instance
##   current_bd_instance $oldCurInst
## }
## proc create_hier_cell_AXI_MM_3_stage_reg { parentCell nameHier } {
## 
##   variable script_folder
## 
##   if { $parentCell eq "" || $nameHier eq "" } {
##      catch {common::send_msg_id "BD_TCL-102" "ERROR" "create_hier_cell_AXI_MM_3_stage_reg() - Empty argument(s)!"}
##      return
##   }
## 
##   # Get object for parentCell
##   set parentObj [get_bd_cells $parentCell]
##   if { $parentObj == "" } {
##      catch {common::send_msg_id "BD_TCL-100" "ERROR" "Unable to find parent cell <$parentCell>!"}
##      return
##   }
## 
##   # Make sure parentObj is hier blk
##   set parentType [get_property TYPE $parentObj]
##   if { $parentType ne "hier" } {
##      catch {common::send_msg_id "BD_TCL-101" "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
##      return
##   }
## 
##   # Save current instance; Restore later
##   set oldCurInst [current_bd_instance .]
## 
##   # Set parent object as current
##   current_bd_instance $parentObj
## 
##   # Create cell and set as current instance
##   set hier_obj [create_bd_cell -type hier $nameHier]
##   current_bd_instance $hier_obj
## 
##   # Create interface pins
##   create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 M_AXI
##   create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI
## 
##   # Create pins
##   create_bd_pin -dir I -type clk m_axi_aclk
##   create_bd_pin -dir I -type rst m_axi_aresetn
## 
##   # Create instance: axi_register_slice_1, and set properties
##   set axi_register_slice_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_register_slice:2.1 axi_register_slice_1 ]
## 
##   # Create instance: axi_register_slice_2, and set properties
##   set axi_register_slice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_register_slice:2.1 axi_register_slice_2 ]
## 
##   # Create interface connections
##   connect_bd_intf_net -intf_net Conn1 [get_bd_intf_pins M_AXI] [get_bd_intf_pins axi_register_slice_2/M_AXI]
##   connect_bd_intf_net -intf_net Conn2 [get_bd_intf_pins S_AXI] [get_bd_intf_pins axi_register_slice_1/S_AXI]
##   connect_bd_intf_net -intf_net axi_register_slice_1_M_AXI [get_bd_intf_pins axi_register_slice_1/M_AXI] [get_bd_intf_pins axi_register_slice_2/S_AXI]
## 
##   # Create port connections
##   connect_bd_net -net m_axi_aclk_1 [get_bd_pins m_axi_aclk] [get_bd_pins axi_register_slice_1/aclk] [get_bd_pins axi_register_slice_2/aclk]
##   connect_bd_net -net m_axi_aresetn_1 [get_bd_pins m_axi_aresetn] [get_bd_pins axi_register_slice_1/aresetn] [get_bd_pins axi_register_slice_2/aresetn]
## 
##   # Restore current instance
##   current_bd_instance $oldCurInst
## }
## proc create_hier_cell_AXI_LITE_3Stage_reg { parentCell nameHier } {
## 
##   variable script_folder
## 
##   if { $parentCell eq "" || $nameHier eq "" } {
##      catch {common::send_msg_id "BD_TCL-102" "ERROR" "create_hier_cell_AXI_LITE_3Stage_reg() - Empty argument(s)!"}
##      return
##   }
## 
##   # Get object for parentCell
##   set parentObj [get_bd_cells $parentCell]
##   if { $parentObj == "" } {
##      catch {common::send_msg_id "BD_TCL-100" "ERROR" "Unable to find parent cell <$parentCell>!"}
##      return
##   }
## 
##   # Make sure parentObj is hier blk
##   set parentType [get_property TYPE $parentObj]
##   if { $parentType ne "hier" } {
##      catch {common::send_msg_id "BD_TCL-101" "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
##      return
##   }
## 
##   # Save current instance; Restore later
##   set oldCurInst [current_bd_instance .]
## 
##   # Set parent object as current
##   current_bd_instance $parentObj
## 
##   # Create cell and set as current instance
##   set hier_obj [create_bd_cell -type hier $nameHier]
##   current_bd_instance $hier_obj
## 
##   # Create interface pins
##   create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 M_AXI
##   create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI
## 
##   # Create pins
##   create_bd_pin -dir I -type clk S_aclk
##   create_bd_pin -dir I -type rst S_aresetn
## 
##   # Create instance: axi_register_slice_0, and set properties
##   set axi_register_slice_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_register_slice:2.1 axi_register_slice_0 ]
##   set_property -dict [ list \
##    CONFIG.REG_R {7} \
##    CONFIG.REG_W {7} \
##  ] $axi_register_slice_0
## 
##   # Create instance: axi_register_slice_2, and set properties
##   set axi_register_slice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_register_slice:2.1 axi_register_slice_2 ]
##   set_property -dict [ list \
##    CONFIG.REG_R {7} \
##    CONFIG.REG_W {7} \
##  ] $axi_register_slice_2
## 
##   # Create interface connections
##   connect_bd_intf_net -intf_net Conn1 [get_bd_intf_pins M_AXI] [get_bd_intf_pins axi_register_slice_2/M_AXI]
##   connect_bd_intf_net -intf_net S_AXI_1 [get_bd_intf_pins S_AXI] [get_bd_intf_pins axi_register_slice_0/S_AXI]
##   connect_bd_intf_net -intf_net axi_register_slice_0_M_AXI [get_bd_intf_pins axi_register_slice_0/M_AXI] [get_bd_intf_pins axi_register_slice_2/S_AXI]
## 
##   # Create port connections
##   connect_bd_net -net aclk_1 [get_bd_pins S_aclk] [get_bd_pins axi_register_slice_0/aclk] [get_bd_pins axi_register_slice_2/aclk]
##   connect_bd_net -net aresetn_1 [get_bd_pins S_aresetn] [get_bd_pins axi_register_slice_0/aresetn] [get_bd_pins axi_register_slice_2/aresetn]
## 
##   # Restore current instance
##   current_bd_instance $oldCurInst
## }
## proc create_root_design { parentCell } {
## 
##   variable script_folder
##   variable design_name
## 
##   if { $parentCell eq "" } {
##      set parentCell [get_bd_cells /]
##   }
## 
##   # Get object for parentCell
##   set parentObj [get_bd_cells $parentCell]
##   if { $parentObj == "" } {
##      catch {common::send_msg_id "BD_TCL-100" "ERROR" "Unable to find parent cell <$parentCell>!"}
##      return
##   }
## 
##   # Make sure parentObj is hier blk
##   set parentType [get_property TYPE $parentObj]
##   if { $parentType ne "hier" } {
##      catch {common::send_msg_id "BD_TCL-101" "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
##      return
##   }
## 
##   # Save current instance; Restore later
##   set oldCurInst [current_bd_instance .]
## 
##   # Set parent object as current
##   current_bd_instance $parentObj
## 
## 
##   # Create interface ports
##   set M_AXI_TO_STATIC [ create_bd_intf_port -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 M_AXI_TO_STATIC ]
##   set_property -dict [ list \
##    CONFIG.ADDR_WIDTH {64} \
##    CONFIG.CLK_DOMAIN {PCIe_Bridge_ICAP_complex_xdma_0_0_axi_aclk} \
##    CONFIG.DATA_WIDTH {512} \
##    CONFIG.FREQ_HZ {250000000} \
##    CONFIG.PROTOCOL {AXI4} \
##    ] $M_AXI_TO_STATIC
##   set S_AXI_LITE_FROM_STATIC [ create_bd_intf_port -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI_LITE_FROM_STATIC ]
##   set_property -dict [ list \
##    CONFIG.ADDR_WIDTH {32} \
##    CONFIG.ARUSER_WIDTH {0} \
##    CONFIG.AWUSER_WIDTH {0} \
##    CONFIG.BUSER_WIDTH {0} \
##    CONFIG.CLK_DOMAIN {PCIe_Bridge_ICAP_complex_xdma_0_0_axi_aclk} \
##    CONFIG.DATA_WIDTH {32} \
##    CONFIG.FREQ_HZ {250000000} \
##    CONFIG.HAS_BRESP {1} \
##    CONFIG.HAS_BURST {0} \
##    CONFIG.HAS_CACHE {0} \
##    CONFIG.HAS_LOCK {0} \
##    CONFIG.HAS_PROT {1} \
##    CONFIG.HAS_QOS {0} \
##    CONFIG.HAS_REGION {0} \
##    CONFIG.HAS_RRESP {1} \
##    CONFIG.HAS_WSTRB {1} \
##    CONFIG.ID_WIDTH {0} \
##    CONFIG.MAX_BURST_LENGTH {1} \
##    CONFIG.NUM_READ_OUTSTANDING {1} \
##    CONFIG.NUM_READ_THREADS {1} \
##    CONFIG.NUM_WRITE_OUTSTANDING {1} \
##    CONFIG.NUM_WRITE_THREADS {1} \
##    CONFIG.PROTOCOL {AXI4LITE} \
##    CONFIG.READ_WRITE_MODE {READ_WRITE} \
##    CONFIG.RUSER_BITS_PER_BYTE {0} \
##    CONFIG.RUSER_WIDTH {0} \
##    CONFIG.SUPPORTS_NARROW_BURST {0} \
##    CONFIG.WUSER_BITS_PER_BYTE {0} \
##    CONFIG.WUSER_WIDTH {0} \
##    ] $S_AXI_LITE_FROM_STATIC
## 
##   # Create ports
##   set AXI_RESET_N [ create_bd_port -dir I -type rst AXI_RESET_N ]
##   set CLK_IN_125M [ create_bd_port -dir I -type clk CLK_IN_125M ]
##   set_property -dict [ list \
##    CONFIG.ASSOCIATED_BUSIF {S_AXI_LITE_FROM_STATIC} \
##    CONFIG.CLK_DOMAIN {PCIe_Bridge_ICAP_complex_xdma_0_0_axi_aclk} \
##    CONFIG.FREQ_HZ {250000000} \
##  ] $CLK_IN_125M
##   set CLK_IN_250 [ create_bd_port -dir I -type clk CLK_IN_250 ]
##   set_property -dict [ list \
##    CONFIG.ASSOCIATED_BUSIF {M_AXI_TO_STATIC} \
##    CONFIG.ASSOCIATED_RESET {AXI_RESET_N} \
##    CONFIG.CLK_DOMAIN {PCIe_Bridge_ICAP_complex_xdma_0_0_axi_aclk} \
##    CONFIG.FREQ_HZ {250000000} \
##  ] $CLK_IN_250
##   set CLK_IN_PROG [ create_bd_port -dir I -type clk CLK_IN_PROG ]
##   set_property -dict [ list \
##    CONFIG.CLK_DOMAIN {PCIe_Bridge_ICAP_complex_xdma_0_0_axi_aclk} \
##    CONFIG.FREQ_HZ {400000000} \
##  ] $CLK_IN_PROG
## 
##   # Create instance: AXI_LITE_3Stage_reg
##   create_hier_cell_AXI_LITE_3Stage_reg [current_bd_instance .] AXI_LITE_3Stage_reg
## 
##   # Create instance: AXI_MM_3_stage_reg
##   create_hier_cell_AXI_MM_3_stage_reg [current_bd_instance .] AXI_MM_3_stage_reg
## 
##   # Create instance: HLS_ip
##   create_hier_cell_HLS_ip [current_bd_instance .] HLS_ip
## 
##   # Create instance: proc_sys_reset_125, and set properties
##   set proc_sys_reset_125 [ create_bd_cell -type ip -vlnv xilinx.com:ip:proc_sys_reset:5.0 proc_sys_reset_125 ]
## 
##   # Create instance: proc_sys_reset_250, and set properties
##   set proc_sys_reset_250 [ create_bd_cell -type ip -vlnv xilinx.com:ip:proc_sys_reset:5.0 proc_sys_reset_250 ]
## 
##   # Create instance: proc_sys_reset_PROG, and set properties
##   set proc_sys_reset_PROG [ create_bd_cell -type ip -vlnv xilinx.com:ip:proc_sys_reset:5.0 proc_sys_reset_PROG ]
## 
##   # Create interface connections
##   connect_bd_intf_net -intf_net AXI_LITE_3Stage_reg_M_AXI [get_bd_intf_pins AXI_LITE_3Stage_reg/M_AXI] [get_bd_intf_pins HLS_ip/S_AXI]
##   connect_bd_intf_net -intf_net AXI_MM_3_stage_reg_M_AXI [get_bd_intf_ports M_AXI_TO_STATIC] [get_bd_intf_pins AXI_MM_3_stage_reg/M_AXI]
##   connect_bd_intf_net -intf_net S_AXI_LITE_FROM_STATIC_1 [get_bd_intf_ports S_AXI_LITE_FROM_STATIC] [get_bd_intf_pins AXI_LITE_3Stage_reg/S_AXI]
##   connect_bd_intf_net -intf_net axi_clock_converter_1_M_AXI [get_bd_intf_pins AXI_MM_3_stage_reg/S_AXI] [get_bd_intf_pins HLS_ip/M_AXI]
## 
##   # Create port connections
##   connect_bd_net -net AXI_RESET_N_1 [get_bd_ports AXI_RESET_N] [get_bd_pins proc_sys_reset_125/ext_reset_in] [get_bd_pins proc_sys_reset_250/ext_reset_in] [get_bd_pins proc_sys_reset_PROG/ext_reset_in]
##   connect_bd_net -net CLK_IN_125M_1 [get_bd_ports CLK_IN_125M] [get_bd_pins AXI_LITE_3Stage_reg/S_aclk] [get_bd_pins HLS_ip/CLK_125M] [get_bd_pins proc_sys_reset_125/slowest_sync_clk]
##   connect_bd_net -net CLK_IN_250_1 [get_bd_ports CLK_IN_250] [get_bd_pins AXI_MM_3_stage_reg/m_axi_aclk] [get_bd_pins HLS_ip/CLK_250M] [get_bd_pins proc_sys_reset_250/slowest_sync_clk]
##   connect_bd_net -net CLK_IN_PROG_1 [get_bd_ports CLK_IN_PROG] [get_bd_pins HLS_ip/HLS_ip_clk] [get_bd_pins proc_sys_reset_PROG/slowest_sync_clk]
##   connect_bd_net -net HLS_IP_ARESETN_1 [get_bd_pins HLS_ip/HLS_IP_ARESETN] [get_bd_pins proc_sys_reset_PROG/peripheral_aresetn]
##   connect_bd_net -net proc_sys_reset_1_peripheral_aresetn [get_bd_pins AXI_LITE_3Stage_reg/S_aresetn] [get_bd_pins HLS_ip/ARESETN_125M] [get_bd_pins proc_sys_reset_125/peripheral_aresetn]
##   connect_bd_net -net proc_sys_reset_250_peripheral_aresetn [get_bd_pins AXI_MM_3_stage_reg/m_axi_aresetn] [get_bd_pins HLS_ip/ARESETN_250M] [get_bd_pins proc_sys_reset_250/peripheral_aresetn]
## 
##   # Create address segments
##   create_bd_addr_seg -range 0x002000000000 -offset 0x00000000 [get_bd_addr_spaces HLS_ip/sdx_cppKernel_top_0/Data_m_axi_gmem] [get_bd_addr_segs M_AXI_TO_STATIC/Reg] SEG_M_AXI_TO_STATIC_Reg
##   create_bd_addr_seg -range 0x00010000 -offset 0x00000000 [get_bd_addr_spaces S_AXI_LITE_FROM_STATIC] [get_bd_addr_segs HLS_ip/sdx_cppKernel_top_0/s_axi_control/Reg] SEG_sdx_cppKernel_top_0_Reg
## 
## 
##   # Restore current instance
##   current_bd_instance $oldCurInst
## 
##   save_bd_design
## }
## create_root_design ""
WARNING: [BD 41-1282] Ignoring parameter LAYERED_METADATA
WARNING: [BD 41-1281] Parameter LAYERED_METADATA is not defined on /HLS_ip/sdx_cppKernel_top_0/s_axi_control. Setting parameter on /HLS_ip/sdx_cppKernel_top_0/s_axi_control failed
WARNING: [BD 41-1282] Ignoring parameter LAYERED_METADATA
WARNING: [BD 41-1281] Parameter LAYERED_METADATA is not defined on /HLS_ip/sdx_cppKernel_top_0/s_axi_control. Setting parameter on /HLS_ip/sdx_cppKernel_top_0/s_axi_control failed
Wrote  : </home/sanjayr/projects/TUL_VCU1525/Z10_PCIe_gen3x16/IP/role/IP_SDX_ACCL_KERNEL_FP_VECTOR_MULT/HLS_PR_SDX_SRAI/HLS_PR_SDX_SRAI.bd> 
# generate_target_HLS_ip
INFO: [BD 41-1662] The design 'HLS_PR_SDX_SRAI.bd' is already validated. Therefore parameter propagation will not be re-run.
Wrote  : </home/sanjayr/projects/TUL_VCU1525/Z10_PCIe_gen3x16/IP/role/IP_SDX_ACCL_KERNEL_FP_VECTOR_MULT/HLS_PR_SDX_SRAI/HLS_PR_SDX_SRAI.bd> 
WARNING: [BD 41-235] Width mismatch when connecting pin: '/HLS_ip/axi_clock_converter_1/s_axi_arlock'(1) to net 'sdx_cppKernel_top_0_m_axi_gmem_ARLOCK'(2) - Only lower order bits will be connected.
WARNING: [BD 41-235] Width mismatch when connecting pin: '/HLS_ip/axi_clock_converter_1/s_axi_awlock'(1) to net 'sdx_cppKernel_top_0_m_axi_gmem_AWLOCK'(2) - Only lower order bits will be connected.
VHDL Output written to : /home/sanjayr/projects/TUL_VCU1525/Z10_PCIe_gen3x16/IP/role/IP_SDX_ACCL_KERNEL_FP_VECTOR_MULT/HLS_PR_SDX_SRAI/synth/HLS_PR_SDX_SRAI.v
WARNING: [BD 41-235] Width mismatch when connecting pin: '/HLS_ip/axi_clock_converter_1/s_axi_arlock'(1) to net 'sdx_cppKernel_top_0_m_axi_gmem_ARLOCK'(2) - Only lower order bits will be connected.
WARNING: [BD 41-235] Width mismatch when connecting pin: '/HLS_ip/axi_clock_converter_1/s_axi_awlock'(1) to net 'sdx_cppKernel_top_0_m_axi_gmem_AWLOCK'(2) - Only lower order bits will be connected.
VHDL Output written to : /home/sanjayr/projects/TUL_VCU1525/Z10_PCIe_gen3x16/IP/role/IP_SDX_ACCL_KERNEL_FP_VECTOR_MULT/HLS_PR_SDX_SRAI/sim/HLS_PR_SDX_SRAI.v
VHDL Output written to : /home/sanjayr/projects/TUL_VCU1525/Z10_PCIe_gen3x16/IP/role/IP_SDX_ACCL_KERNEL_FP_VECTOR_MULT/HLS_PR_SDX_SRAI/hdl/HLS_PR_SDX_SRAI_wrapper.v
INFO: [BD 41-1029] Generation completed for the IP Integrator block proc_sys_reset_125 .
INFO: [BD 41-1029] Generation completed for the IP Integrator block proc_sys_reset_250 .
INFO: [BD 41-1029] Generation completed for the IP Integrator block proc_sys_reset_PROG .
WARNING: [IP_Flow 19-4994] Overwriting existing constraint file '/home/sanjayr/projects/TUL_VCU1525/Z10_PCIe_gen3x16/IP/role/IP_SDX_ACCL_KERNEL_FP_VECTOR_MULT/HLS_PR_SDX_SRAI/ip/HLS_PR_SDX_SRAI_axi_clock_converter_0_0/HLS_PR_SDX_SRAI_axi_clock_converter_0_0_ooc.xdc'
INFO: [BD 41-1029] Generation completed for the IP Integrator block HLS_ip/axi_clock_converter_0 .
WARNING: [IP_Flow 19-4994] Overwriting existing constraint file '/home/sanjayr/projects/TUL_VCU1525/Z10_PCIe_gen3x16/IP/role/IP_SDX_ACCL_KERNEL_FP_VECTOR_MULT/HLS_PR_SDX_SRAI/ip/HLS_PR_SDX_SRAI_axi_clock_converter_1_0/HLS_PR_SDX_SRAI_axi_clock_converter_1_0_ooc.xdc'
INFO: [BD 41-1029] Generation completed for the IP Integrator block HLS_ip/axi_clock_converter_1 .
WARNING: [IP_Flow 19-519] IP 'HLS_PR_SDX_SRAI_sdx_cppKernel_top_0_0' detected a language mismatch between 'VHDL Simulation Wrapper' and 'Verilog Simulation' output products. Please check with the IP provider to see if this is expected.
INFO: [BD 41-1029] Generation completed for the IP Integrator block HLS_ip/sdx_cppKernel_top_0 .
INFO: [BD 41-1029] Generation completed for the IP Integrator block AXI_MM_3_stage_reg/axi_register_slice_1 .
INFO: [BD 41-1029] Generation completed for the IP Integrator block AXI_MM_3_stage_reg/axi_register_slice_2 .
INFO: [BD 41-1029] Generation completed for the IP Integrator block AXI_LITE_3Stage_reg/axi_register_slice_0 .
INFO: [BD 41-1029] Generation completed for the IP Integrator block AXI_LITE_3Stage_reg/axi_register_slice_2 .
Exporting to file /home/sanjayr/projects/TUL_VCU1525/Z10_PCIe_gen3x16/IP/role/IP_SDX_ACCL_KERNEL_FP_VECTOR_MULT/HLS_PR_SDX_SRAI/hw_handoff/HLS_PR_SDX_SRAI.hwh
Generated Block Design Tcl file /home/sanjayr/projects/TUL_VCU1525/Z10_PCIe_gen3x16/IP/role/IP_SDX_ACCL_KERNEL_FP_VECTOR_MULT/HLS_PR_SDX_SRAI/hw_handoff/HLS_PR_SDX_SRAI_bd.tcl
Generated Hardware Definition File /home/sanjayr/projects/TUL_VCU1525/Z10_PCIe_gen3x16/IP/role/IP_SDX_ACCL_KERNEL_FP_VECTOR_MULT/HLS_PR_SDX_SRAI/synth/HLS_PR_SDX_SRAI.hwdef
INFO: [Common 17-206] Exiting Vivado at Thu Jan 11 03:33:59 2018...
